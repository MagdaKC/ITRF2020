/nobackup/mkuzmicz/scripts/ITRF2020/OPS/ARC_SETUP_PP_BIAS[4]: #set: not found [No such file or directory]
#      ARC_SETUP [DELTA] [MAIN_PATH] [CASE]

########################################################################
#                                                                      #
# OLD_ARC is retrieved and incremented by the desired number of days,  #
# DELTA.  The result, NEW_ARC, is converted into yearmonthday-format   #
# in order to build an SLR filename.                                   #
#                                                                      #
########################################################################


SCR_NAME=ARC_SETUP
+ SCR_NAME=ARC_SETUP
SCR_PARM=3
+ SCR_PARM=3
SCR_LIST="DELTA MAIN_PATH CASE"
+ SCR_LIST='DELTA MAIN_PATH CASE'
SCR_VERS=210309.0


+ SCR_VERS=210309.0
if [ `expr $#` -lt $SCR_PARM ]; then
   echo "Usage: $SCR_NAME ${SCR_LIST}\007"
   exit 101
fi

expr $#
+ expr 4
+ [ 4 -lt 3 ]
DateTime=`date '+DATE: %m/%d/%y  TIME: %H:%M:%S'`

date '+DATE: %m/%d/%y  TIME: %H:%M:%S'
+ date '+DATE: %m/%d/%y  TIME: %H:%M:%S'
+ DateTime='DATE: 02/09/23  TIME: 09:03:12'
echo " # "
+ echo ' # '
 # 
echo " #  $SCR_NAME $* "
+ echo ' #  ARC_SETUP 7 /nobackup/mkuzmicz WEEKLY 415 '
 #  ARC_SETUP 7 /nobackup/mkuzmicz WEEKLY 415 
echo " # "
+ echo ' # '
 # 
echo " #  Version $SCR_VERS "
+ echo ' #  Version 210309.0 '
 #  Version 210309.0 
echo " # "
+ echo ' # '
 # 
echo " #  Run Date $DateTime "
+ echo ' #  Run Date DATE: 02/09/23  TIME: 09:03:12 '
 #  Run Date DATE: 02/09/23  TIME: 09:03:12 
echo " # "


+ echo ' # '
 # 
# Set variables.                                                       #

DELTA=${1:-7}
+ DELTA=7
MAIN_PATH=${2:-/space/users/magda}
+ MAIN_PATH=/nobackup/mkuzmicz
CASE=${3:-WEEKLY}
+ CASE=WEEKLY
SNX_VER=$4

+ SNX_VER=415
mkdir /nobackup/mkuzmicz/tmp/ARC_SET_$$
+ mkdir /nobackup/mkuzmicz/tmp/ARC_SET_89438
cd /nobackup/mkuzmicz/tmp/ARC_SET_$$
+ cd /nobackup/mkuzmicz/tmp/ARC_SET_89438
# The name convention for the implicated arcs is:

## OLD_ARC    #  The arc we did in the previous round (we use its PUNCH-file here)
## NEW_ARC    #  The current arc we are running this week, it becomes OLD_ARC later
## NXT_ARC    #  Next round's arc which will be used for setting the end-date of current arc

# Retrieve the information for the last, new, and next arcs:

read OYEAR ODOY Date_OLD_ARC OLD_ARC < $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_SETUP_OLD.${CASE}_v${SNX_VER}
+ read OYEAR ODOY Date_OLD_ARC OLD_ARC
+ 0< /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_SETUP_OLD.WEEKLY_v415
read NYEAR NDOY Date_NEW_ARC NEW_ARC < $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_SETUP_NEW.${CASE}_v${SNX_VER}
+ read NYEAR NDOY Date_NEW_ARC NEW_ARC
+ 0< /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_SETUP_NEW.WEEKLY_v415
read XYEAR XDOY Date_NXT_ARC NXT_ARC < $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_SETUP_NXT.${CASE}_v${SNX_VER}

+ read XYEAR XDOY Date_NXT_ARC NXT_ARC
+ 0< /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_SETUP_NXT.WEEKLY_v415
# Save END_DATE info for SINEX "end-date" computation:

SDOY=$XDOY
+ SDOY=36
SYEAR=$XYEAR

+ SYEAR=2023
# Set the proper dates for this run:

YR=`echo $NYEAR | cut -c3-4 `

echo $NYEAR | cut -c3-4 
+ echo 2023
+ cut -c3-4
+ YR=23
echo $NEW_ARC $YR > $MAIN_PATH/INFILES/INF_OPS_ITRF2020/CURRENT_ARC_DR.${CASE}_v${SNX_VER}
+ echo w30129 23
+ 1> /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/CURRENT_ARC_DR.WEEKLY_v415
echo $NEW_ARC $Date_NEW_ARC > $MAIN_PATH/INFILES/INF_OPS_ITRF2020/CURRENT_ARC_EMT.${CASE}_v${SNX_VER}

+ echo w30129 230129
+ 1> /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/CURRENT_ARC_EMT.WEEKLY_v415
EPOCH_DATE=$Date_OLD_ARC
+ EPOCH_DATE=230122
START_DATE=$Date_NEW_ARC
+ START_DATE=230129
END_DATE=$Date_NXT_ARC

+ END_DATE=230205
echo $EPOCH_DATE $START_DATE $END_DATE 

+ echo 230122 230129 230205
230122 230129 230205
sed -e "s/RRRRRR/$Date_OLD_ARC/g" -e "s/BBBBBB/$Date_NEW_ARC/g" -e "s/EEEEEE/$Date_NXT_ARC/g" $MAIN_PATH/INFILES/INF_OPS_ITRF2020/EPOCH_MASTER > $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_SETUP_EPOCHS.${CASE}_v${SNX_VER}


+ sed -e s/RRRRRR/230122/g -e s/BBBBBB/230129/g -e s/EEEEEE/230205/g /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/EPOCH_MASTER
+ 1> /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_SETUP_EPOCHS.WEEKLY_v415
# Generate the file with the EPOCH, START, STOP and ACCEL dates:

# First for LAGEOS arcs:

$SCRIPTS/MAKE_1_ARC_DATES $START_DATE $END_DATE $ARC_LEN $DELTA $ACCEL_NUM_L > o.MAKE_1_ARC_DATES_L 2>&1

+ /nobackup/mkuzmicz/scripts/ITRF2020/OPS/MAKE_1_ARC_DATES 230129 230205 7 7 2
+ 1> o.MAKE_1_ARC_DATES_L 2>& 1
# The results are locally in the files "newepochs" and "midepochs".
 
cp newepochs $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_INFO_L.${CASE}_v${SNX_VER}
+ cp newepochs /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_INFO_L.WEEKLY_v415
cp midepochs $MAIN_PATH/INFILES/INF_OPS_ITRF2020/MID-ARC_INFO.${CASE}_v${SNX_VER}

+ cp midepochs /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/MID-ARC_INFO.WEEKLY_v415
# Now for ETALON arcs:

$SCRIPTS/MAKE_1_ARC_DATES $START_DATE $END_DATE $ARC_LEN $DELTA $ACCEL_NUM_E > o.MAKE_1_ARC_DATES_E 2>&1

+ /nobackup/mkuzmicz/scripts/ITRF2020/OPS/MAKE_1_ARC_DATES 230129 230205 7 7 1
+ 1> o.MAKE_1_ARC_DATES_E 2>& 1
# The results are locally in the files "newepochs" and "midepochs".
 
cp newepochs $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_INFO_E.${CASE}_v${SNX_VER}
+ cp newepochs /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_INFO_E.WEEKLY_v415
cp midepochs $MAIN_PATH/INFILES/INF_OPS_ITRF2020/MID-ARC_INFO.${CASE}_v${SNX_VER}

+ cp midepochs /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/MID-ARC_INFO.WEEKLY_v415
#
#  Make input for turning the OLD_ARC punch to get the elements for the current arc:
#

echo $OLD_ARC $NEW_ARC > $MAIN_PATH/INFILES/INF_OPS_ITRF2020/2_turn_4_run_series.${CASE}_v${SNX_VER}


+ echo w30122 w30129
+ 1> /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/2_turn_4_run_series.WEEKLY_v415
# Calculate "new" NXT_ARC, whose date will also be the END_DATE of next round's arc:                                   
XDOY=`expr $XDOY + $DELTA`

expr $XDOY + $DELTA
+ expr 36 + 7
+ XDOY=43
# Leap years: 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028

#
case $XYEAR in

   1980) ndays=366 ;;       #  Leap year
   1984) ndays=366 ;;       #  Leap year
   1988) ndays=366 ;;       #  Leap year
   1992) ndays=366 ;;       #  Leap year
   1996) ndays=366 ;;       #  Leap year
   2000) ndays=366 ;;       #  Leap year
   2004) ndays=366 ;;       #  Leap year
   2008) ndays=366 ;;       #  Leap year
   2012) ndays=366 ;;       #  Leap year
   2016) ndays=366 ;;       #  Leap year
   2020) ndays=366 ;;       #  Leap year
   2024) ndays=366 ;;       #  Leap year
   2028) ndays=366 ;;       #  Leap year

      *) ndays=365 ;;       #  Default

esac

+ ndays=365
#echo $XYEAR

if [ "$XDOY" -le "$ndays" ]; then

  XYEAR=$XYEAR

elif [ "$XDOY" -gt "ndays" ]; then

  XDOY=` expr $XDOY - $ndays `
  XYEAR=` expr $XYEAR + 1 `

fi

+ [ 43 -le 365 ]
+ XYEAR=2023
#echo $XYEAR $XDOY

# Convert Date_NXT_ARC to yearmonthday:

$MAIN_PATH/scripts/ydoy2ymd $XYEAR $XDOY > tempo


+ /nobackup/mkuzmicz/scripts/ydoy2ymd 2023 43
+ 1> tempo
# Convert to our file-name convention:

read Date_NXT_ARC < tempo

+ read Date_NXT_ARC
+ 0< tempo
Y=`echo $Date_NXT_ARC|cut -c1-1`
echo $Date_NXT_ARC|cut -c1-1
+ echo 230212
+ cut -c1-1
+ Y=2
MD=`echo $Date_NXT_ARC|cut -c2-6`

echo $Date_NXT_ARC|cut -c2-6
+ echo 230212
+ cut -c2-6
+ MD=30212
if [ "$Y" -eq "0" ]; then

  Y=z

elif [ "$Y" -eq "9" ]; then

  Y=n

elif [ "$Y" -eq "8" ]; then

  Y=e

elif [ "$Y" -eq "7" ]; then

  Y=s

elif [ "$Y" -eq "6" ]; then

  Y=x

elif [ "$Y" -eq "1" ]; then

  Y=o

elif [ "$Y" -eq "2" ]; then

  Y=w

fi

+ [ 2 -eq 0 ]
+ [ 2 -eq 9 ]
+ [ 2 -eq 8 ]
+ [ 2 -eq 7 ]
+ [ 2 -eq 6 ]
+ [ 2 -eq 1 ]
+ [ 2 -eq 2 ]
+ Y=w
  NXT_ARC=${Y}${MD}

+ NXT_ARC=w30212
  echo $XYEAR $XDOY $Date_NXT_ARC $NXT_ARC > tempo

+ echo 2023 43 230212 w30212
+ 1> tempo
mv tempo $MAIN_PATH/INFILES/INF_OPS_ITRF2020/ARC_SETUP_FTR.$CASE_v${SNX_VER}

+ mv tempo /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/ARC_SETUP_FTR.415
#echo $XYEAR $XDOY " = " $NXT_ARC



# Calculate the current SNX_DATE, which is the date = END_DATE - 1 day:

SDOY=`expr $SDOY - 1`

expr $SDOY - 1
+ expr 36 - 1
+ SDOY=35
if [ "$SDOY" -eq "0" ]; then

  SYEAR=` expr $SYEAR - 1 `

case $SYEAR in

   1980) ndays=366 ;;       #  Leap year
   1984) ndays=366 ;;       #  Leap year
   1988) ndays=366 ;;       #  Leap year
   1992) ndays=366 ;;       #  Leap year
   1996) ndays=366 ;;       #  Leap year
   2000) ndays=366 ;;       #  Leap year
   2004) ndays=366 ;;       #  Leap year
   2008) ndays=366 ;;       #  Leap year
   2012) ndays=366 ;;       #  Leap year
   2016) ndays=366 ;;       #  Leap year
   2020) ndays=366 ;;       #  Leap year
   2024) ndays=366 ;;       #  Leap year
   2028) ndays=366 ;;       #  Leap year

      *) ndays=365 ;;       #  Default

esac

  SDOY=$ndays

fi

+ [ 35 -eq 0 ]
#
case $SYEAR in

   1980) ndays=366 ;;       #  Leap year
   1984) ndays=366 ;;       #  Leap year
   1988) ndays=366 ;;       #  Leap year
   1992) ndays=366 ;;       #  Leap year
   1996) ndays=366 ;;       #  Leap year
   2000) ndays=366 ;;       #  Leap year
   2004) ndays=366 ;;       #  Leap year
   2008) ndays=366 ;;       #  Leap year
   2012) ndays=366 ;;       #  Leap year
   2016) ndays=366 ;;       #  Leap year
   2020) ndays=366 ;;       #  Leap year
   2024) ndays=366 ;;       #  Leap year
   2028) ndays=366 ;;       #  Leap year

      *) ndays=365 ;;       #  Default

esac

+ ndays=365
#echo $SYEAR

if [ "$SDOY" -le "$ndays" ]; then

  SYEAR=$SYEAR

elif [ "$SDOY" -gt "$ndays" ]; then

  SDOY=` expr $SDOY - $ndays `
  SYEAR=` expr $SYEAR + 1 `

fi

+ [ 35 -le 365 ]
+ SYEAR=2023
#echo $SYEAR $SDOY

# Convert Date_NXT_ARC to yearmonthday:

$MAIN_PATH/scripts/ydoy2ymd $SYEAR $SDOY > stempo

+ /nobackup/mkuzmicz/scripts/ydoy2ymd 2023 35
+ 1> stempo
mv stempo $MAIN_PATH/INFILES/INF_OPS_ITRF2020/SINEX_DATE_INFO.${CASE}_v${SNX_VER}
+ mv stempo /nobackup/mkuzmicz/INFILES/INF_OPS_ITRF2020/SINEX_DATE_INFO.WEEKLY_v415
cd ..
+ cd ..
#2001014 rm -rf ARC_SET_$$
cd /nobackup/mkuzmicz/tmp/magda/$TT
+ cd /nobackup/mkuzmicz/tmp/magda/
exit
+ exit
